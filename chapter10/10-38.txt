迭代器类别

输入迭代器(input iterator):可以读取序列中的元素，一个输入迭代器必须支持
1. 用于比较两个迭代器的相等和不相等运算符(==、!=)
2. 用于推进迭代器的前置和后置递增运算(++)
3. 用于读取元素的解引用运算符(*):解引用只会出现在赋值运算符的右侧
4. 箭头运算符(->),等价于(*it).member,即,解引用迭代器，并提取对象的成员

输出迭代器(output iterator):可以看作输入迭代器功能上的补集——只写二不读元素。输出
迭代器必须支持
1. 用于推进迭代器的前置和后置递增运算(++)
2. 解引用运算符(*),只出现在赋值运算符的左侧(向一个已经解引用的输出迭代器赋值，就是将
值写入它所指向的元素)

前向迭代器(forward iterator):可以读写元素。这类迭代器只能在序列中沿一个方向移动。
前向迭代器支持所有输入和输出迭代器的操作，而且可以多次读写同一个元素。

双向迭代器(bidirectional iterator):可以正向/反向读写序列中的元素。除了支持所有
前向迭代器的操作之外，双向迭代器还支持前置和后置递减运算符(--)

随机访问迭代器(random-access iterator):提供在常量时间内访问序列中任意元素的能力。
此类迭代器支持双向迭代器的所有功能，此外还支持以下操作：
1. 用于比较两个迭代器相对位置的关系运算符(<、<=、>和>=)
2. 迭代器和一个整数值得加减运算符(+、+=、-和-=),计算结果是迭代器在序列中前进(或后退)
给定整数个元素后的位置
3. 用于两个迭代器上的减法运算符(-),得到两个迭代器的距离
4. 下标运算符(iter[n]),与*(iter[n])等价